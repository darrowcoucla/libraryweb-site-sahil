<?php
/**
 * @file
 * Code for the UCLALIB Event feature.
 */

include_once 'uclalib_event.features.inc';

/**
 * Implements hook_ctools_plugin_directory()
 */
function uclalib_event_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_views_pre_view().
 *
 * Set date range from path if present.
 */
function uclalib_event_views_pre_view(&$view) {
  if ($view->name == 'events_agenda' || $view->name == 'exhibitions_main_view') {
    $date = explode('/', current_path());
    if (isset($date[2])) {
      $values = explode('--', $date[2]);
      if (!isset($values[1])) {
        $values[1] = $values[0];
      }
      // Add one day to the end date so we catch events on that date. (The
      // views date filter only has granularity to the day.
      $values[1] = date('Y-m-d', strtotime($values[1] . ' + 1 day'));

      if (isset($values[0])) {
        if (isset($view->display['default']->handler->options['filters']['field_event_date'])) {
          $view->display['default']->handler->options['filters']['field_event_date']['value'] = $values[0];
        }
        $view->display['default']->handler->options['filters']['field_exhibition_end']['value'] = $values[0];
      }
      if (isset($values[1])) {
        if (isset($view->display['default']->handler->options['filters']['field_event_date_1'])) {
          $view->display['default']->handler->options['filters']['field_event_date_1']['value'] = $values[1];
        }
        $view->display['default']->handler->options['filters']['field_exhibition_start']['value'] = $values[1];
      }
    }
    else {

      // Default to showing the next 14 days.
      if (isset($view->display['default']->handler->options['filters']['field_event_date'])) {
        $view->display['default']->handler->options['filters']['field_event_date']['value'] = date('Y-m-d');
      }
      $view->display['default']->handler->options['filters']['field_exhibition_start']['value'] = date('Y-m-d', strtotime('+14 days'));
      if (isset($view->display['default']->handler->options['filters']['field_event_date_1'])) {
        $view->display['default']->handler->options['filters']['field_event_date_1']['value'] = date('Y-m-d', strtotime('+14 days'));
      }
      $view->display['default']->handler->options['filters']['field_exhibition_end']['value'] = date('Y-m-d');
    }
  }
}

/**
 * Implements hook_form_alter
 * Override view pane edit form (input on pane config)
 * Based on code from: https://maslow.snipt.net/drupal-7-override-view-pane-edit-form-input-on-pane-config/
 */
function uclalib_event_form_alter(&$form, $form_state, $form_id) {
  if (isset($form_state['pane'])) {
    // Check for correct form: view_name-panel_display_name
    if (in_array($form_state['pane']->subtype, array("related_events-panel_pane_4"))) {

      // get Events and Exhibitions Series vocabulary
      $form["arguments"]["field_event_series_tid"]["#type"] = "select";
      $form["arguments"]["field_event_series_tid"]["#multiple"] = TRUE;
      $form["arguments"]["field_event_series_tid"]["#options"] = _uclalib_event_taxonomy_select('events_and_exhibitions_series', 0, 1);
      $form["arguments"]["field_event_series_tid"]["#default_value"] = explode('+', $form["arguments"]["field_event_series_tid"]["#default_value"]);

      $form['#validate'][] = 'uclalib_event_widget_validate';
    }
  }
}

/**
 * Custom validation handler for Event Series widget
 */
function uclalib_event_widget_validate($form, &$form_state) {
  $form_state['values']['arguments']['field_event_series_tid'] = implode('+', $form_state['values']['arguments']['field_event_series_tid']);
}

/**
 * Gets terms for given vocabulary
 * The second argument is the depth
 */
function _uclalib_event_taxonomy_select($machine_name, $parent = 0, $depth = NULL) {
  $vocab = taxonomy_vocabulary_machine_name_load($machine_name);
  $terms = taxonomy_get_tree($vocab->vid, $parent, $depth);
  $output = array('all' => '(All Series)');
  foreach ($terms as $data) {
    $output[$data->tid] = $data->name;
  }
  return $output;
}
